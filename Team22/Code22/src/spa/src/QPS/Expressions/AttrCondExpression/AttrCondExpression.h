//
// Created by Tanishq Sharma on 10/3/23.
//

#ifndef SPA_ATTRCONDEXPRESSION_H
#define SPA_ATTRCONDEXPRESSION_H

#include "QPS/Expressions/Expressions.h"
#include "QPS/Evaluator/ResultTable.h"
#include <string>

using namespace std;

class AttrCondExpression : public Expression {
private:
    string syn1attr;
    string syn2attr;

    /**
     * A map that maps an attribute name to its corresponding type.
     */
    static unordered_map<string, string> attrToType;

    /**
     * Given a reference string and a synonym table, generate a DesignEntity object and a pair of attribute name and
     * type. This method is used to parse a synonym with attribute in the WHERE clause of the query.
     *
     * @param ref The reference string to be converted.
     * @param synonymTable A map of synonyms to their corresponding StmtRefs and variables.
     *
     * @return A pair containing a DesignEntity object and a pair of attribute name and type.
     */
    static pair<DesignEntity*, pair<string, string>> generateSynAndAttrName(string ref, SynonymTable synonymTable);

    /**
     * Check if the given query contains an AttrCondExpression.
     *
     * @param query The query string to be checked.
     *
     * @return True if the query contains an AttrCondExpression, false otherwise.
     */
    static bool containsAttrCondExpression(string query);

public:
    /**
     * Construct an AttrCondExpression object with the given DesignEntities and attribute names.
     *
     * @param syn1 The first DesignEntity object.
     * @param syn1attr The attribute name of the first DesignEntity object.
     * @param syn2 The second DesignEntity object.
     * @param syn2attr The attribute name of the second DesignEntity object.
     */
    AttrCondExpression(DesignEntity* syn1, string syn1attr, DesignEntity* syn2, string syn2attr);

    string toString() const override;

    /**
     * Extract all AttrCondExpressions from the given query string.
     *
     * @param query The query string to be parsed.
     * @param synonymTable A map of synonyms to their corresponding StmtRefs and variables.
     *
     * @return A vector of AttrCondExpression objects extracted from the query.
     */
    static vector<AttrCondExpression*> extractAttrCondExpression(const string& query, const SynonymTable& synonymTable);

    /**
     * Evaluate the query using the given PKB and return a ResultTable object.
     *
     * @param pkb The Program Knowledge Base used to evaluate the query.
     *
     * @return The ResultTable generated by the evaluation.
     */
    ResultTable* evaluate(PKB pkb) override;
};

#endif //SPA_ATTRCONDEXPRESSION_H